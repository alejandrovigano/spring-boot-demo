package ar.com.cgarcete.demo.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import ar.com.cgarcete.demo.domain.Person;
import ar.com.cgarcete.demo.service.PersonService;
import ar.com.cgarcete.demo.utils.Log;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class PersonRestController {
	
	// This means to get the bean called subscriberRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private PersonService personService;

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Person> getAllPersons() {
		Log.info("GET ALL PERSONS - ");
		return personService.findAll();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> findById(@PathVariable("id") Long id) {
		Log.info("GET ONE PERSON -");
		Person person = personService.findOne(id);
		
		return ResponseEntity.ok().body(person.toString());
	}
	
	@PostMapping
	public ResponseEntity<?> save(@RequestBody Person person) {
		Log.info("POST - "	+	person.toString());
		personService.save(person);
		return ResponseEntity.ok().body("Persona creada: "+ person.toString());

	}
	
	@PutMapping("/{id}")
	public ResponseEntity<?> updatePerson(@PathVariable("id") Long id, @RequestBody Person person) {
		Log.info("PUT - "	+	person.toString());
		Optional<Person> propietarioActualizado = personService.update(id, person);
		if (propietarioActualizado.isPresent()) {
			return ResponseEntity.ok().body("Persona actualizada: " + person.toString());
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<?> deletePerson(@PathVariable("id") Long id) {
		Log.info("DELETE - ");
		Optional<Person> person = personService.delete(id);
		if (person.isPresent()) {
			return ResponseEntity.ok().body("Persona eliminada:" + id);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
	}
}
